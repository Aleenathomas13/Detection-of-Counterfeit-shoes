# -*- coding: utf-8 -*-
"""cnnproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PLKZAJgLGh2e4QegqHfvkTJAgJzBg5ns

Training and testing a cnn model to detect real and counterfeit shoes using primary dataset
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense,Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
# Define directories
train_directory = '/content/drive/MyDrive/Projects'

# Image dimensions and batch size
img_width, img_height = 224, 224
batch_size = 32

# Create ImageDataGenerator for training data with data splitting
train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    validation_split=0.2
)

# Load and augment the training data
train_generator = train_datagen.flow_from_directory(
    train_directory,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary',
    shuffle=True,
    subset='training'
)

# Load and augment the validation data
validation_generator = train_datagen.flow_from_directory(
    train_directory,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary',
    shuffle=True,
    subset='validation'
)

# Build the CNN model
model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Flatten())

model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

learning_rate = 0.001
optimizer = Adam(learning_rate=learning_rate)

model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    epochs=15,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // batch_size,

)

#classification report
from sklearn.metrics import classification_report


validation_generator.reset()
predictions = model.predict(validation_generator, steps=validation_generator.samples // batch_size + 1)
predicted_classes = (predictions > 0.5).astype('int32')

true_classes = validation_generator.classes

report = classification_report(true_classes, predicted_classes, target_names=['Dataset_fake', 'Dataset_Real'])
print(report)

model.save("/content/drive/MyDrive/cnnproject.h5")

#testing on new data
from tensorflow.keras.preprocessing import image
import numpy as np

# Load the image you want to make predictions on
img_path = '/content/drive/MyDrive/real shoes.png'
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)  # Expand the dimensions to create a batch


img_array = img_array / 255.0

# Make predictions
predictions = model.predict(img_array)

# Interpret the predictions
if predictions[0] < 0.5:
    print("The model predicts this is a 'fake' shoe.")
else:
    print("The model predicts this is a 'real' shoe.")

#testing on new data
import cv2
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
# Load the saved model
file_path = '/content/drive/MyDrive/cnnproject.h5'
loaded_model = load_model(file_path)

# Load and preprocess the image for prediction
img_path = '/content/drive/MyDrive/Shoes images/newfake.png'  # Replace with the path to your image
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)  # Expand the dimensions to create a batch


img_array = img_array / 255.0

# Make predictions
predictions = model.predict(img_array)

# Assuming 0 is for fake and 1 is for real (based on your model's class order)
if predictions[0] < 0.5:
    print("The model predicts this is a 'fake' shoe.")
else:
    print("The model predicts this is a 'real' shoe.")

#visualization
import matplotlib.pyplot as plt

# Plot accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from tensorflow.keras.models import load_model

# Load the saved model
model = load_model("/content/drive/MyDrive/cnnproject.h5")

# Generate predictions on the validation data
predictions = model.predict(validation_generator)
y_pred = np.round(predictions).flatten()  # Assuming binary classification, adjust if needed

# Get true labels from the validation data generator
y_true = validation_generator.classes

# Generate confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Plot confusion matrix
labels = ['Real', 'Fake']  # Replace with your actual class labels if needed
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()

